---
import MainLayout from "../../layouts/mainLayout.astro";
const {
  title,
  buttonText,
  windowTitle,
  successMessage = "Usuario registrado con exito",
  errorMessage = "El usuario o correo ya existen",
  storageKey = "registerData",
  validateDuplicates = true,
} = Astro.props;
---

<MainLayout title={windowTitle}>
  <h1 class="form-title">{title}</h1>
  <form
    id="register"
    title="Registro de Usuario"
    data-success-message={successMessage}
    data-error-message={errorMessage}
    data-storage-key={storageKey}
    data-validate-duplicate={validateDuplicates}
  >
    <div class="form-fields">
      <slot />
      <button type="submit" class="button-sumbit">
        {buttonText}
      </button>
    </div>
    <div id="form-feedback" class="form-feedback"></div>
  </form>
  <script>
    try {
      document.addEventListener("DOMContentLoaded", () => {
        const form = document.getElementById("register");
        const successMessage = form.dataset.successMessage;
        const errorMessage = form.dataset.errorMessage;
        const storageKey = form.dataset.storageKey;
        const validationDuplicates = form.dataset.validateDuplicate === "true";
        const feedback = document.getElementById("form-feedback");
        form.addEventListener("submit", (e) => {
          e.preventDefault();
          const inputs = form.querySelectorAll("input");
          const textAreas = form.querySelectorAll("textarea");
          const emailInput = form.querySelector('input[type="email"]');
          let valid = true;
          let errorMsg = "";

          inputs.forEach((input) => {
            if (!input.value.trim()) {
              valid = false;
              errorMsg = "Por favor, completa todos los campos.";
              input.classList.add("input-error");
            } else {
              input.classList.remove("input-error");
            }
          });

          textAreas.forEach((textarea) => {
            if (!textarea.value.trim()) {
              valid = false;
              errorMsg = "Por favor, completa todos los campos.";
              textarea.classList.add("input-error");
            } else {
              textarea.classList.remove("input-error");
            }
          });

          if (emailInput && !/^[^@]+@[^@]+\.[^@]+$/.test(emailInput.value)) {
            valid = false;
            errorMsg = "Por favor, ingresa un email vÃ¡lido.";
            emailInput.classList.add("input-error");
          }

          if (!valid) {
            feedback.textContent = errorMsg;
            feedback.style.color = "var(--error)";
            console.log(errorMsg);
            return;
          }

          const data = {};
          inputs.forEach((input) => {
            data[input.name] = input.value;
          });

          textAreas.forEach((textAreas) => {
            data[textAreas.name] = textAreas.value;
          });

          let users = JSON.parse(localStorage.getItem(storageKey));
          if (!Array.isArray(users)) {
            users = [];
          }

          if (
            validationDuplicates &&
            users.some(
              (user) => user.email == data.email || user.user == data.user
            )
          ) {
            feedback.textContent = errorMessage;
            feedback.style.color = "var(--error)";
            return;
          }

          users.push(data);
          localStorage.setItem(storageKey, JSON.stringify(users));
          feedback.textContent = successMessage;
          feedback.style.color = "var(--success)";
          form.reset();
        });
      });
    } catch (error) {
      console.log("Ocurrio un error, por favor intente nuevamente");
    }
  </script>

  <style>

    #register {
      display: grid;
      grid-template-rows: auto auto;
      grid-template-columns: auto;
      align-items: flex-start;
      justify-content: center;
      margin: 1rem auto;
      padding: 0.5rem 1rem;
      gap: 1em;
    }

    .form-title {
      width: 100%;
      text-align: center;
      font-size: 3rem;
      color: var(--primary);
      display: block;
    }

    .form-fields {
      display: flex;
      flex-direction: column;
      gap: 2em;
      width: 100%;
    }

    .form-feedback {
      min-height: 2em;
      margin: 0.5em 0 0.5em 0;
      text-align: center;
      font-size: 1.2rem;
      border-radius: 8px;
      padding: 0.7em 1em;
    }

    .button-sumbit {
      cursor: pointer;
      display: block;
      background-color: var(--accent);
      color: var(--text);
      border-radius: 5px;
      font-size: 1.5rem;
      padding: 10px;
      transition: background 0.2s ease-in-out;
    }



    @media screen and (max-width: 1024px) {
      .form-fields {
        flex-direction: column;
      }
    }
  </style>
</MainLayout>
